// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RateLimitingBankAPI.Contexts;

#nullable disable

namespace RateLimitingBankAPI.Migrations
{
    [DbContext(typeof(CustomerContext))]
    partial class CustomerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RateLimitingBankAPI.Models.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Address_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Country");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("CustomerId_FK");

                    b.Property<string>("DoorNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Door_No");

                    b.Property<long?>("PinCode")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("Pin_Code");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Street_Name");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("RateLimitingBankAPI.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Customer_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<long?>("ContactNo")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RateLimitingBankAPI.Models.Corporate", b =>
                {
                    b.HasBaseType("RateLimitingBankAPI.Models.Customer");

                    b.Property<int>("CompanyType")
                        .HasColumnType("int")
                        .HasColumnName("CompanyType");

                    b.ToTable("Corporate", (string)null);
                });

            modelBuilder.Entity("RateLimitingBankAPI.Models.Individual", b =>
                {
                    b.HasBaseType("RateLimitingBankAPI.Models.Customer");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.ToTable("Individual", (string)null);
                });

            modelBuilder.Entity("RateLimitingBankAPI.Models.Address", b =>
                {
                    b.HasOne("RateLimitingBankAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RateLimitingBankAPI.Models.Corporate", b =>
                {
                    b.HasOne("RateLimitingBankAPI.Models.Customer", null)
                        .WithOne()
                        .HasForeignKey("RateLimitingBankAPI.Models.Corporate", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RateLimitingBankAPI.Models.Individual", b =>
                {
                    b.HasOne("RateLimitingBankAPI.Models.Customer", null)
                        .WithOne()
                        .HasForeignKey("RateLimitingBankAPI.Models.Individual", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
